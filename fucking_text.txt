def create_a_basic_model(input_shape = (129,129)):
    # Create A U-Net architecture
    inputs = keras.Input(shape=input_shape, name="input")
    # Expand the dimensions
    x = tf.reshape(inputs, (-1,*input_shape,1))

    x = keras.layers.Conv2D(32, (3,3), activation="relu")(x)
    x = keras.layers.MaxPooling2D((2,2))(x)
    x = keras.layers.Conv2D(64, (3,3), activation="relu")(x)
    x = keras.layers.MaxPooling2D((2,2))(x)
    x = keras.layers.Conv2D(64, (3,3), activation="relu")(x)
    enc = keras.layers.MaxPooling2D((2,2))(x)

    # Upsample
    x = keras.layers.Conv2DTranspose(8, (3,3), activation="relu")(enc)
    x = keras.layers.UpSampling2D((2,2))(x)
    x = keras.layers.Conv2DTranspose(8, (3,3), activation="relu")(x)
    x = keras.layers.UpSampling2D((2,2))(x)
    x = keras.layers.Conv2DTranspose(4, (3,3), activation="relu")(x)
    x = keras.layers.UpSampling2D((2,2))(x)
    # Truncate
    x = keras.layers.Flatten()(x)
    x = tf.slice(x, [0,0], [-1,input_shape[0]*input_shape[1]])

    out = tf.reshape(x, (-1,*input_shape))
    #out = keras.layers.Reshape((129,129,1), input_shape=(129*129,))(x)

    model = keras.Model(inputs=inputs, outputs=out)

    print(model.summary())

    model.compile(optimizer='adam', loss="mse")
    return model